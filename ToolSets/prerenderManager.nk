set cut_paste_input [stack 0]
version 8.0 v1
push $cut_paste_input
NoOp {
 name PrerenderManager
 tile_color 0x270a27ff
 label "\n\n\n\nv1.0"
 note_font_size 20
 selected true
 xpos 124
 ypos -106
 hide_input true
 addUserKnob {20 PrerendererSettings l Prerenderer}
 addUserKnob {26 _________ l "" +STARTLINE}
 addUserKnob {26 note_makePrerender l "" +STARTLINE T "Choose a renderpath for the prerenders,\na file type and select the nodes to be\nprerendered. Then click on \"make prerenders\""}
 addUserKnob {2 prerender_renderpath l "" +STARTLINE}
 addUserKnob {4 fileType l "" -STARTLINE M {exr dpx tif png "" "" "" "" ""}}
 addUserKnob {22 makePrerenders l "make prerenders" -STARTLINE T "import os\nimport re\n\nrenderPath = os.path.dirname(nuke.thisNode()\[\"prerender_renderpath\"].getValue()) + \"/\"\npadding = \"%04d\"\next = nuke.thisNode()\[\"fileType\"].getValue()\nif ext == 0.0:\n    ext = \"exr\"\nelif ext == 1.0:\n    ext = \"dpx\"\nelif ext == 2.0:\n    ext = \"tif\"\nelif ext == 3.0:\n    ext = \"png\"\n\ntry:\n    curVersion = re.findall(r\"_\[Vv]\\d*\", os.path.basename(nuke.root().name()))\[0]\n    renderPath += curVersion+\"/\"\nexcept:\n    curVersion = \"\"\n\ndef makePrerender(node):\n    nukescripts.clear_selection_recursive()\n    node\[\"selected\"].setValue(True)\n\n    dependentNodes = node.dependent()  \n\n    writeLocation = renderPath+node.name()\n    if not os.path.isdir(writeLocation):\n        os.makedirs(writeLocation)\n\n    #write\n    write = nuke.createNode(\"Write\",inpanel = False)\n    write\[\"file\"].setValue(writeLocation+\"/\{name\}\{version\}_\{padding\}.\{ext\}\".format(name = node.name(), version = curVersion, padding = padding, ext = ext))\n    write\[\"label\"].setValue(\"_intermediate_\")\n    write\[\"file_type\"].setValue(ext)\n    write\[\"channels\"].setValue(\"all\")\n    write.setName(\"intermediate_%s\" % node.name())\n    write.setXpos(node.xpos())\n    write.setYpos(node.ypos()+200)\n    write.setInput(0,node)\n\n   #switch\n    switch = nuke.createNode(\"Switch\",inpanel = False)\n    switch\[\"which\"].setValue(1)\n    switch.setXpos(write.xpos())\n    switch.setYpos(write.ypos()+80)\n    switch\[\"label\"].setValue(\"_intermediate_\\n(1)read prerenders\")\n    switch.setInput(0,write)\n    \n    #read\n    read = nuke.createNode(\"Read\",inpanel = False)\n    read\[\"file\"].setValue(writeLocation+\"/\{name\}\{version\}_\{padding\}.\{ext\}\".format(name = node.name(), version = curVersion, padding = padding, ext = ext))\n    read\[\"first\"].setValue(int(nuke.root()\[\"first_frame\"].getValue()))\n    read\[\"origfirst\"].setValue(int(nuke.root()\[\"first_frame\"].getValue()))\n    read\[\"last\"].setValue(int(nuke.root()\[\"last_frame\"].getValue()))\n    read\[\"origlast\"].setValue(int(nuke.root()\[\"last_frame\"].getValue()))\n    read.setXpos(switch.xpos()-120)\n    read.setYpos(write.ypos()+40)\n    read\[\"label\"].setValue(\"_intermediate_\")   \n    switch.setInput (1,read)\n\n    #backdrop\n    bd = nuke.createNode(\"BackdropNode\",inpanel = False)\n    bd.setXpos(write.xpos()-150)\n    bd.setYpos(write.ypos()-80)\n    bd\[\"bdwidth\"].setValue(300)\n    bd\[\"bdheight\"].setValue(230)\n    bd\[\"note_font_size\"].setValue(25)\n    bd\[\"label\"].setValue(\"_intermediate_%s\"%node.name())\n    bd\[\"tile_color\"].setValue(654977023)\n\n    for node in dependentNodes:\n        node.setInput(0,switch)\n\n#prerender loop\nnodesToPrerender = nuke.selectedNodes()\n\nif curVersion != \"\":\n    if renderPath != \"\" and renderPath != \"/\":\n        if len(nodesToPrerender) != 0:\n            if nuke.ask(\"Please give all selected nodes some reasonable names to create meaningful and recognizable prerender elements. Did you do that?\"):\n                for node in nodesToPrerender:\n                    if node.name() != \"PrerenderManager\" and node.Class() != \"Viewer\":\n                        makePrerender(node)\n        else:\n            nuke.message(\"Please select some nodes to prerender. Please give the last node before the render a meaningful name to create meaningful prerender element names.\")\n    else:\n        nuke.message(\"Please set up a render path for the prerenders\")\nelse:\n    nuke.message(\"No version found. Please make sure that the script has a version.\")\n\n\n\n"}
 addUserKnob {26 ___________ l "" +STARTLINE}
 addUserKnob {26 note_changeSwitches l "" +STARTLINE T "change switches to original (pipe through) / prerenders"}
 addUserKnob {4 changeSwitches l "" +STARTLINE M {"pipe through (original)" prerenders "" ""}}
 changeSwitches prerenders
 addUserKnob {22 changeSwitches_1 l "change switches" -STARTLINE T "switchVal = nuke.thisNode()\['changeSwitches'].getValue()\n\nfor s in nuke.allNodes(\"Switch\"):\n    if \"_intermediate_\" in s\[\"label\"].getValue():\n        if switchVal == 1.0:\n            s\[\"which\"].setValue(1)\n            s\[\"label\"].setValue(\"_intermediate_\\n(1)read prerenders\")\n        else:\n            s\[\"which\"].setValue(0)\n            s\[\"label\"].setValue(\"_intermediate_\\n(0)pipe through\")\n\nfor bd in nuke.allNodes(\"BackdropNode\"):\n    if \"_intermediate_\" in bd\[\"label\"].getValue():\n        if switchVal == 1.0:\n            bd\[\"tile_color\"].setValue(654977023)\n        else:\n            bd\[\"tile_color\"].setValue(1326731263)\n    "}
 addUserKnob {26 _____________ l "" +STARTLINE}
 addUserKnob {26 versionUpPrerenders l "" +STARTLINE T "versioning prerenders"}
 addUserKnob {22 prerender_versionup l "version up" T "import nukescripts\nnukescripts.clear_selection_recursive()\n\nfor node in nuke.allNodes():\n    if node.Class() == \"Read\" or node.Class() == \"Write\":\n        if \"_intermediate_\" in node\[\"label\"].getValue():\n            node.setSelected(True)\n            nukescripts.version_up()\n            node.setSelected(False)\n            \n            if not os.path.isdir(os.path.dirname(node\[\"file\"].getValue())):\n                os.makedirs(os.path.dirname(node\[\"file\"].getValue()))\n            " +STARTLINE}
 addUserKnob {22 prerender_versiondown l "version down" -STARTLINE T "import nukescripts\nnukescripts.clear_selection_recursive()\n\nfor node in nuke.allNodes():\n    if node.Class() == \"Read\" or node.Class() == \"Write\":\n        if \"_intermediate_\" in node\[\"label\"].getValue():\n            node.setSelected(True)\n            nukescripts.version_down()\n            node.setSelected(False)"}
 addUserKnob {26 __________ l "" +STARTLINE}
 addUserKnob {22 renderPrerenders l "render prerenders" T "nukescripts.clear_selection_recursive()\nfor node in nuke.allNodes(\"Write\"):\n    if \"_intermediate_\" in node\[\"label\"].getValue():\n        node\[\"selected\"].setValue(True)\n\nnukescripts.showRenderDialog(nuke.selectedNodes(), False)\n" +STARTLINE}
 addUserKnob {26 ________ l "" +STARTLINE}
 addUserKnob {26 note_deletePrerenders l "" +STARTLINE T "delete all prerender nodes to get back to the original connection.\nPlease note that the rendered files themselves won't be deleted"}
 addUserKnob {22 deletePrerenderNodes l "delete prerender nodes" T "import nukescripts\n\nnukescripts.clear_selection_recursive()\n\nfor node in nuke.allNodes():\n    if \"_intermediate_\" in node\[\"label\"].getValue():\n        nuke.delete(node)" +STARTLINE}
 addUserKnob {20 help_1 l help}
 addUserKnob {26 helptext l "" +STARTLINE T "PrerenderManager v1.0\n\nThis Node helps you creating prerenderes automatically\nand keeping track of them.\n\nTo create prerenders:\n1) Select some nodes from that you like to create prerenders.\nPlease make sure to give the last node before creating a\nprerender a meaningful name to create meaningful prerender names.\n2)Choose a render directory to where you like to render all the prerenders\n3)Choose a filetype\n4)click on \"make prerenders\"\n\nYou can change if you like your comp tree to read the prerenders\nor if the original data gets piped through. Just select the method\nyou like to have and click on \"change switches\". All prerender\nbackdrops get changed to quicker check which mode you are currently\nusing: dark purple: read prerenders; lighter purple: original (pipe through)\n\nIn order to delete all prerender nodes just click on delete prerenders.\nPlease note that the rendered files themselves won't be deleted\n\nfor more information please visit: www.leafpictures.de/PrerenderManager"}
}
